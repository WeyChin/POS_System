#pragma checksum "C:\Users\heng.weychin\source\repos\POS_System\POS_System\Views\Home\ScanProductPage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2d062993c5bbac1fa7a13500544f87be6b38b3ad"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ScanProductPage), @"mvc.1.0.view", @"/Views/Home/ScanProductPage.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\heng.weychin\source\repos\POS_System\POS_System\Views\_ViewImports.cshtml"
using POS_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\heng.weychin\source\repos\POS_System\POS_System\Views\_ViewImports.cshtml"
using POS_System.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2d062993c5bbac1fa7a13500544f87be6b38b3ad", @"/Views/Home/ScanProductPage.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"13a982ebc93f81eff6880187a78df8cf4995bd2f", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_ScanProductPage : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\heng.weychin\source\repos\POS_System\POS_System\Views\Home\ScanProductPage.cshtml"
  
    Layout = "_Layout";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
<script src=""https://js.stripe.com/v3/""></script>

<div class=""container mt-5"">
    <div class=""row"">
        <div class=""col-md-6"">
            <h2>Scan Product ID:</h2>
            <input type=""text"" class=""form-control"" id=""productIdInput"" placeholder=""Scan product ID"">
        </div>
        <div class=""col-md-6"">
            <h2>Product Details:</h2>
            <div class=""overflow-auto"" style=""max-height: 650px;"">
                <table class=""table"">
                    <thead>
                        <tr>
                            <th>Product SKU</th>
                            <th>Product Name</th>
                            <th>Product Quantity</th>
                            <th>Product Price</th>
                            <!-- Add more columns as needed -->
                        </tr>
                    </thead>
                    <tbody id=""productDetails"">
         ");
            WriteLiteral(@"               <!-- Product details will be added here dynamically -->
                    </tbody>
                </table>
            </div>
            <p>Total Price: <span id=""totalPrice"">0</span></p>
            <div class=""float-left"">
                <button class=""btn btn-info mt-3"" id=""clearProductBtn"">Clear</button>
            </div>
            <button class=""btn btn-primary mt-3 float-right"" id=""paymentBtn"">Pay</button>
        </div>
    </div>
</div>

<script>
    // Function to add product details to the table
    function addProductDetails(productSKU, productName, productQuantity, productPrice) {
        var tableBody = document.getElementById(""productDetails"");
        var existingRow = null;

        console.log(productSKU);
        console.log(""1"");
        console.log($('#productDetails tr').length);

        // Check if the product SKU already exists in the table
        $('#productDetails tr').each(function () {
            console.log(productSKU);
          ");
            WriteLiteral(@"  console.log(""2"");
            if ($(this).find('td:eq(0)').text() === productSKU) {
                existingRow = $(this);
                return false; // Exit the loop
            }
        });

        if (existingRow) {
            // If the product SKU already exists, update the quantity and price
            var quantity = parseInt(existingRow.find('td:eq(2)').text()) + productQuantity;
            var price = parseFloat(existingRow.find('td:eq(3)').text()) + (productPrice * productQuantity);
            existingRow.find('td:eq(2)').text(quantity);
            existingRow.find('td:eq(3)').text(price.toFixed(2));
        } else {
            // If the product SKU does not exist, add a new row
            var newRow = tableBody.insertRow();
            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);
            var cell4 = newRow.insertCell(3);
            cell1.innerHTML = productSKU;
            cell2.in");
            WriteLiteral(@"nerHTML = productName;
            cell3.innerHTML = productQuantity;
            cell4.innerHTML = (productPrice * productQuantity).toFixed(2);
            // Add more cells and data as needed
        }

        // Update total price
        updateTotalPrice();
    }

    // Function to fetch product details from the controller
    function fetchProductDetails(productSKU) {
        $.ajax({
            type: 'GET',
            url: '/Home/GetProductDetails', // Replace with your controller action URL
            data: { productSKU: productSKU },
            success: function (data) {
                addProductDetails(data.SKU, data.Name, 1, data.PricePerUnit);
            },
            error: function (xhr, status, error) {
                console.error(error);
                alert('Error fetching product details. Please try again.');
            }
        });
    }

    // Function to update the total price
    function updateTotalPrice() {
        var totalPrice = 0;
        ");
            WriteLiteral(@"$('#productDetails tr').each(function () {
            var price = parseFloat($(this).find('td:eq(3)').text());
            totalPrice += price;
        });
        $('#totalPrice').text(totalPrice.toFixed(2));
    }

    // Event listener for Enter key press in the text field
    document.getElementById(""productIdInput"").addEventListener(""keypress"", function (event) {
        if (event.key === ""Enter"") {
            var productId = event.target.value;
            fetchProductDetails(productId);
            // Clear the input field
            event.target.value = '';
        }
    });

    // Event listener for ""Clear"" button click
    document.getElementById(""clearProductBtn"").addEventListener(""click"", function () {
        $('#productDetails').empty(); // Clear table body
        $('#totalPrice').text('0'); // Reset total price
    });

    //Payment
    document.addEventListener(""DOMContentLoaded"", function () {
        document.getElementById(""paymentBtn"").addEventListener(""click");
            WriteLiteral(@""", function () {
            var amount = parseFloat($('#totalPrice').text());
            var currency = ""MYR"";

            fetch(""/Home/CreatePaymentIntent"", {
                method: ""POST"",
                headers: {
                    ""Content-Type"": ""application/json""
                },
                body: JSON.stringify({
                    amount: amount,
                    currency: currency
                })
            })
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error(""Network response was not ok"");
                    }
                    // Don't attempt to redirect here
                })
                .then(function (data) {
                    // Redirect to the payment URL
                    window.location.href = data.sessionUrl;

                    // Handle successful payment separately
                    handlePaymentSuccess();
                })
                .catch(func");
            WriteLiteral(@"tion (error) {
                    console.error(""Error occurred:"", error.message);
                    alert(""Error processing payment. Please try again."");
                });
        });
    });

    function handlePaymentSuccess() {
        // Get the table element
        var table = document.getElementById(""productTable"");

        // Initialize arrays to store product SKUs and quantities
        var skus = [];
        var quantities = [];

        // Loop through each row in the table
        for (var i = 1; i < table.rows.length; i++) { // Start from 1 to skip header row
            // Get the cells in the current row
            var cells = table.rows[i].cells;

            // Extract SKU and quantity from the cells
            var sku = cells[0].innerText; // Assuming SKU is in the first column
            var quantity = parseInt(cells[2].innerText); // Assuming quantity is in the third column

            // Add SKU and quantity to the arrays
            skus.push(sku);
  ");
            WriteLiteral(@"          quantities.push(quantity);
        }

        // Create an object with SKUs and quantities
        var data = {
            skus: skus,
            quantities: quantities
        };

        // Send a POST request to the controller with the data
        fetch(""/Home/UpdateProductQuantities"", {
            method: ""POST"",
            headers: {
                ""Content-Type"": ""application/json""
            },
            body: JSON.stringify(data)
        })
            .then(function (response) {
                // Handle response
            })
            .catch(function (error) {
                console.error(""Error:"", error);
            });
    }

</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
